// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

package domain

import (
	fmt "fmt"
	_ "github.com/golang/protobuf/ptypes/empty"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	Find(ctx context.Context, in *FindReq, opts ...client.CallOption) (*FindRes, error)
	Store(ctx context.Context, in *StoreReq, opts ...client.CallOption) (*StoreRes, error)
	Update(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*UpdateRes, error)
	FindAll(ctx context.Context, in *FindAllReq, opts ...client.CallOption) (*FindAllRes, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...client.CallOption) (*DeleteRes, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Find(ctx context.Context, in *FindReq, opts ...client.CallOption) (*FindRes, error) {
	req := c.c.NewRequest(c.name, "UserService.Find", in)
	out := new(FindRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Store(ctx context.Context, in *StoreReq, opts ...client.CallOption) (*StoreRes, error) {
	req := c.c.NewRequest(c.name, "UserService.Store", in)
	out := new(StoreRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Update(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*UpdateRes, error) {
	req := c.c.NewRequest(c.name, "UserService.Update", in)
	out := new(UpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindAll(ctx context.Context, in *FindAllReq, opts ...client.CallOption) (*FindAllRes, error) {
	req := c.c.NewRequest(c.name, "UserService.FindAll", in)
	out := new(FindAllRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Delete(ctx context.Context, in *DeleteReq, opts ...client.CallOption) (*DeleteRes, error) {
	req := c.c.NewRequest(c.name, "UserService.Delete", in)
	out := new(DeleteRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	Find(context.Context, *FindReq, *FindRes) error
	Store(context.Context, *StoreReq, *StoreRes) error
	Update(context.Context, *UpdateReq, *UpdateRes) error
	FindAll(context.Context, *FindAllReq, *FindAllRes) error
	Delete(context.Context, *DeleteReq, *DeleteRes) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		Find(ctx context.Context, in *FindReq, out *FindRes) error
		Store(ctx context.Context, in *StoreReq, out *StoreRes) error
		Update(ctx context.Context, in *UpdateReq, out *UpdateRes) error
		FindAll(ctx context.Context, in *FindAllReq, out *FindAllRes) error
		Delete(ctx context.Context, in *DeleteReq, out *DeleteRes) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) Find(ctx context.Context, in *FindReq, out *FindRes) error {
	return h.UserServiceHandler.Find(ctx, in, out)
}

func (h *userServiceHandler) Store(ctx context.Context, in *StoreReq, out *StoreRes) error {
	return h.UserServiceHandler.Store(ctx, in, out)
}

func (h *userServiceHandler) Update(ctx context.Context, in *UpdateReq, out *UpdateRes) error {
	return h.UserServiceHandler.Update(ctx, in, out)
}

func (h *userServiceHandler) FindAll(ctx context.Context, in *FindAllReq, out *FindAllRes) error {
	return h.UserServiceHandler.FindAll(ctx, in, out)
}

func (h *userServiceHandler) Delete(ctx context.Context, in *DeleteReq, out *DeleteRes) error {
	return h.UserServiceHandler.Delete(ctx, in, out)
}
